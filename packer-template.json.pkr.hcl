packer {
  required_plugins {
    amazon = {
      source  = "github.com/hashicorp/amazon"
      version = "~> 1"
    }
  }
}

variable "build_number" {
  type    = string
  default = "${env("GITHUB_RUN_NUMBER")}"
}

variable "instanceType" {
  type    = string
  default = "t3.nano"
}

variable "manifestOutputFile" {
  type    = string
  default = "packer-manifest.json"
}

variable "owner" {
  type    = string
  default = "robandpdx"
}

variable "packageName" {
  type    = string
  default = "application-name"
}

variable "packerSetupScriptFile" {
  type    = string
  default = "packer-setup-script.sh"
}

variable "postInstallScriptFile" {
  type    = string
  default = "noop.sh"
}

variable "preInstallScriptFile" {
  type    = string
  default = "noop.sh"
}

variable "region" {
  type    = string
  default = "us-west-2"
}

variable "sourceAmiName" {
  type    = string
  default = "al2023-ami-*-x86_64"
}

variable "sourceAmiOwner" {
  type    = string
  default = "137112412989"
}

variable "sshTimeout" {
  type    = string
  default = "5m"
}

variable "sshUserName" {
  type    = string
  default = "ec2-user"
}

variable "tagName" {
  type    = string
  default = "packer"
}

variable "tagValue" {
  type    = string
  default = "true"
}

variable "userData" {
  type    = string
  default = ""
}

variable "version" {
  type    = string
  default = "0.1.0"
}

data "amazon-ami" "autogenerated_1" {
  access_key = ""
  filters = {
    name                = "${var.sourceAmiName}"
    root-device-type    = "ebs"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["${var.sourceAmiOwner}"]
  region      = "${var.region}"
  secret_key  = ""
}

locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

source "amazon-ebs" "aws" {
  access_key      = ""
  ami_description = "name=${var.packageName}, arch=x86_64, ancestor_name=${var.sourceAmiName}"
  ami_name        = "${var.packageName}_${var.version}-build-${var.build_number}-ts-${local.timestamp}"
  ami_regions     = ["${var.region}"]
  instance_type   = "${var.instanceType}"
  region          = "${var.region}"
  run_tags = {
    appversion       = "${var.build_number}"
    base_ami_name    = "{{ .SourceAMIName }}"
    base_ami_version = "{{ .SourceAMI }}"
    creation_time    = "${legacy_isotime("2006-01-02 15:04:05 UTC")}"
    creator          = "packer"
    owner            = "${var.owner}"
  }
  secret_key = ""
  security_group_filter {
    filters = {
      "tag:${var.tagName}" = "true"
    }
  }
  source_ami   = "${data.amazon-ami.autogenerated_1.id}"
  ssh_pty      = true
  ssh_timeout  = "${var.sshTimeout}"
  ssh_username = "${var.sshUserName}"
  subnet_filter {
    filters = {
      "tag:${var.tagName}" = "true"
    }
    most_free = true
    random    = false
  }
  tags = {
    Name = "${var.packageName}_${var.version}-build-${var.build_number}-ts-${local.timestamp}"
  }
  user_data = "${var.userData}"
  vpc_filter {
    filters = {
      "tag:${var.tagName}" = "true"
    }
  }
}

build {
  sources = ["source.amazon-ebs.aws"]

  provisioner "shell" {
    inline = ["echo 'running preInstallScript ${var.preInstallScriptFile}'"]
  }

  provisioner "shell" {
    script = "${var.preInstallScriptFile}"
  }

  provisioner "shell" {
    inline = ["echo 'running packerSetupScript ${var.packerSetupScriptFile}'"]
  }

  provisioner "shell" {
    script = "${var.packerSetupScriptFile}"
  }

  provisioner "file" {
    source      = "README.md"
    destination = "/tmp/README.md"
  }

  provisioner "file" {
    source      = "SCRATCHPAD.md"
    destination = "/tmp/SCRATCHPAD.md"
  }

  provisioner "shell" {
    inline = ["sudo mv /tmp/*md /var/www/html/"]
  }

  provisioner "shell" {
    inline = ["echo 'running postInstallScript ${var.postInstallScriptFile}'"]
  }

  provisioner "shell" {
    script = "${var.postInstallScriptFile}"
  }

  provisioner "shell" {
    inline = ["rm /home/${var.sshUserName}/.ssh/authorized_keys"]
  }

  post-processor "manifest" {
    custom_data = {
      region = "${var.region}"
    }
    output = "${var.manifestOutputFile}"
  }
}
