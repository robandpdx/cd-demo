name: Blue Green Deploy Pipeline

on:
  workflow_dispatch:
    inputs:
      ami:
        description: 'AMI ID to deploy'
        required: false
        type: string
  push:
    branches:
      - master

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-west-2

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build
        if: ${{ github.event.inputs.ami == ''}}
        run: echo "Building..."
      - name: Unit test
        if: ${{ github.event.inputs.ami == ''}}
        run: echo "Running unit tests..."
  packer:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      ami: ${{ steps.set_ami.outputs.ami }}
      region: ${{ steps.set_ami.outputs.region }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ github.event.inputs.ami == ''}}
      - name: Setup Packer
        uses: hashicorp-contrib/setup-packer@v2
        if: ${{ github.event.inputs.ami == ''}}
      - name: Run Packer
        run: packer build -var-file=packer-vars.json packer-template.json
        if: ${{ github.event.inputs.ami == ''}}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        if: ${{ github.event.inputs.ami == ''}}
        with:
          name: manifest
          path: packer-manifest.json
      - name: Set AMI
        id: set_ami
        run: |
          # if packer-manifest.json file exists, read it
          if [ -f ./packer-manifest.json ]; then
            content=`cat ./packer-manifest.json`
            amiRegion=`jq -r '.builds[0].artifact_id' < ./packer-manifest.json`
            ami=${amiRegion#*:}
            region=${amiRegion%:*}
            echo "ami=$ami" >> $GITHUB_OUTPUT
            echo "region=$region" >> $GITHUB_OUTPUT
          else
            echo "Using AMI ${{ github.event.inputs.ami }} from workflow_dispatch input"
            echo "ami=${{ github.event.inputs.ami }}" >> $GITHUB_OUTPUT
            echo "region=us-west-2" >> $GITHUB_OUTPUT
          fi
  deploy:
    runs-on: ubuntu-latest
    needs: packer

    strategy:
      matrix:
        include:
          - environment: staging
            url: https://staging.mydomain.com
          - environment: production
            url: https://www.mydomain.com
    environment:
      url: ${{ matrix.url }}
      name: ${{ matrix.environment }}

    steps:
      - uses: actions/checkout@v3
      - name: Download artifact
        if: ${{ github.event.inputs.ami == ''}}
        uses: actions/download-artifact@v2
        with:
          name: manifest
          path: .
      # echo ami from previous job
      - name: Echo AMI
        run: |
          echo "AMI: ${{needs.packer.outputs.ami}}"
          echo "REGION: ${{needs.packer.outputs.region}}"
      # deploy cloudformation template
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{needs.packer.outputs.region}}
      - name: Deploy New Stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{matrix.environment}}-${{github.run_number}}
          template: cloudformation.yml
          parameter-overrides: >-
            KeyName=RobAnderson,
            VPC=vpc-f086c497,
            LatestAmiId=${{needs.packer.outputs.ami}},
            OperatorEmail=robandpdx@github.com,
            Subnets="subnet-ad0a92ca,subnet-8bed4fa0,subnet-87f0e7df,subnet-9e3f8dd7"
      - name: Check New Stack Status
        run: echo "Run commands to check the status of the new stack"
      - name: Flip the load balancer
        run: echo "Run commands to flip the load balancer"
      - name: Delete the old stack
        run: echo "Run commands to delete the old stack"